import warnings
warnings.filterwarnings("ignore")

import socket
try:
    import distro
    $DISTRO = distro.id()
except ModuleNotFoundError:
    print("distro module not installed, assuming arch as distro")
    $DISTRO = "arch"

$HOST = socket.gethostname()

del distro
del socket

if $DISTRO == "ubuntu":
    $PATH = [
        "/home/gil/.local/bin",
        "/home/gil/.config/emacs/bin",
        "/home/gil/.cargo/bin",
        "/usr/local/bin",
        "/usr/bin",
        "/usr/sbin",
        ]
elif $DISTRO == "arch":
    $PATH = [
        "/home/gil/.local/bin",
        "/home/gil/.emacs.d/bin",
        "/home/gil/.cargo/bin",
        "/usr/local/bin",
        "/usr/bin",
        "/usr/bin/vendor_perl",
        "/usr/bin/core_perl",
        ]

$SHELL_TYPE="prompt_toolkit"

$XONSH_HISTORY_FILE="/home/gil/.local/share/xonsh/xonsh-history.sqlite"
$XONSH_HISTORY_BACKEND="sqlite"
$XONSH_HISTORY_SIZE=1_000_000

# kitty is not in terminfo
$TERM="xterm-256color"

#Enable AUTO_CD
$AUTO_CD=True

#Enable vim_mode
$VI_MODE=True

$BROWSER="firefox"
$EDITOR="/usr/bin/vim"
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True

#Encoding
$LANG="en_US.UTF-8"
$LC_ALL="en_US.UTF-8"

#default colorscheme
$XONSH_COLOR_STYLE="default"

source ~/github.com/gforsyth/dotfiles/xonsh/credentials.xsh

source ~/github.com/gforsyth/dotfiles/xonsh/prompt.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/xonshgit.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/gpgssh.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/kubernetes.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/arch.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/aliases.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/xompletions.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/borg.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/nix.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/fzf.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/github.xsh
source ~/github.com/gforsyth/dotfiles/xonsh/pytest_complete.xsh

CONDA_PATH = "/home/gil/mambaforge/bin/conda"

# >>> conda initialize >>>
# !! Contents within this block are managed by "conda init" !!
import sys as _sys
from types import ModuleType as _ModuleType
_mod = _ModuleType("xontrib.conda",
                   f"Autogenerated from $({CONDA_PATH} shell.xonsh hook)")
__xonsh__.execer.exec($(f"{CONDA_PATH}" "shell.xonsh" "hook"),
                      glbs=_mod.__dict__,
                      filename=f"$({CONDA_PATH} shell.xonsh hook)")
_sys.modules["xontrib.conda"] = _mod
del _sys, _mod, _ModuleType
# <<< conda initialize <<<
